#                                    __   __  __
#                                    \ \ / / / /
#                                     \ V / / /
#                                      \_/  \/
#
#                                    V E C T O R
#                                   Configuration
#
# ------------------------------------------------------------------------------
# Website: https://vector.dev
# Docs: https://vector.dev/docs
# Chat: https://chat.vector.dev
# ------------------------------------------------------------------------------

# Change this to use a non-default directory for Vector data storage:
# data_dir: "/var/lib/vector"
sources:
  docker_logs:
    type: docker_logs
    auto_partial_merge: true


  syslog_udp:
    type: syslog
    address: "0.0.0.0:514"
    mode: udp

  syslog_tcp:
    type: syslog
    address: "0.0.0.0:514"
    mode: tcp

  journald_logs:
    type: journald
    include_units: ["sshd", "nginx", "docker", "systemd", "auditd"]

  test_file:
    type: file
    include:
      - /var/log/vector/test-logs.log
    read_from: beginning
    ignore_older_secs: 0
    fingerprint:
      strategy: device_and_inode
      ignored_header_bytes: 0

transforms:
  add_hostname:
    type: remap
    inputs:
      - docker_logs
      - syslog_udp
      - syslog_tcp
      - journald_logs
    source: |
      .hostname = get_env_var("HOSTNAME") ?? "node4"

  tag_log_type_by_unit:
    type: remap
    inputs: [add_hostname]
    source: |
      if exists(.systemd.unit) {
        unit = downcase(string!(.systemd.unit))

        if unit == "sshd.service" {
          .log_type = "auth"
        } else if unit == "auditd.service" {
          .log_type = "audit"
        } else if unit == "systemd.service" {
          .log_type = "system"
        } else if starts_with(unit, "nginx") {
          .log_type = "nginx"
        } else if unit == "docker.service" {
          .log_type = "docker"
        } else {
          .log_type = "service"
        }
      } else {
        .log_type = "unknown"
      }

  tag_log_type_docker:
    type: remap
    inputs: [docker_logs]
    source: |
      if !exists(.log_type) || .log_type == "unknown" {
        if .source_type == "docker_logs" {
          .log_type = "docker"
        }
      }

  parse_json_logs:
    type: remap
    inputs: [tag_log_type_docker]  # changed from add_hostname
    source: |
      parsed, err = parse_json(.message)
      if err == null {
        ., err = merge(., parsed)
      }

  drop_noise:
    type: filter
    inputs: [parse_json_logs]
    condition: |
      !(includes(["info", "notice"], .level) ||
        includes(["info", "notice"], .log_level))

  add_metadata:
    type: remap
    inputs: [drop_noise]
    source: |
      .pipeline_stage = "ingest"
      .received_at = now()
      .app_source = .source

  parse_json:
    type: remap
    inputs:
      - test_file
    source: |
      . = parse_json!(.message)
    
sinks:
  to_disk_file:
    type: file
    inputs:
      - add_metadata
    path: "/var/log/vector/buffered_logs.log"
    encoding:
      codec: json

  to_vector:
    type: vector
    inputs: [add_metadata, parse_json]
    address: 192.168.56.13:9000
    acknowledgements: false
    healthcheck: false
    buffer:
      type: disk
      max_size: 524288000    #(500MiB)
      when_full: block


# Optional: read back from backup file (useful for replay/testing)
# Note: avoid loops by sending it to a test sink only
# sources:
#   from_file_backup:
#     type: file
#     path: /var/log/vector/backup.log
#     ignore_older: 86400  # 1 day